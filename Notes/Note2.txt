TDD & BDD

Test Driven Development & Behaivor Driven Development
Стиль дизайна, при котором тесты предшествуют созданию проекта (код)
TDD - тесты проводятся на языке программирования, как в проекте
БДР - использование единого языка тестирования

Принцип заимствован из экстремального программирования (XP) - проект
должны быть выполнены самым простым (кратчайшим) способом, что приводит к
прохождение всех испытаний.

User Stories
На замену ТЗ в гибких схемах употребляется подход составленния "Историй пользователя".
ТЗ обеспечивает "техничность" - цифры, алгоритмы, часовые лимиты и.т.д.
User Stories - описание желаемой функциональности с точки зрения пользователя
например: "Я хочу что-бы регистрация происходила в несколько этапов - вместо 
заполнения огромной формы, мне давали несколько коротких вопросов-полей для заполнения".

Тестирование исключительных ситуаций 

Про что идет речь -- про реагирование кода (алгоритмов) на неправильные или сомнительные данные

Например, String.IndexOf (char) - если "char" отсутствует в строке ---
исключение или ошибка?
возвращает ошибку '-1', которая не может быть позицией

Открыть файл, который не существует (или заблокирован) - > FileNotFoundException
	почему исключение? потому что работу конструкторов иначе нельзя прервать никак

Когда делать ошибки, когда исключения?
- ошибки используются там, где ожидается их появление (поиск недостающего элемента)
- исключения - когда продолжение работы невозможно при наличии данных

Особенностью системы тестирования блока является то, что
также работает на исключение. То есть появление исключения в новом коде
будет воспринята как провал теста. Это требует особых подходов к
испытания ситуаций, в которых должны быть исключения.

Особенность модульной системы тестирования заключается в том, 
что Assert также работает с исключениями. То есть, 
появление исключения в нашем кодексе будет воспринято как провал испытания. 
Это требует особых подходов к проверкам ситуаций, в которых должны быть исключения.
- вместо блоков пробного захвата лучше использовать Assert.
Бросает Исключение для того, чтобы строго проверить тип исключения 
(принцип обобщения к нему не применяется FileNotFoundException не засчитывается как Исключение)
- при передаче эксклюзивного кода в метод, 
следует "обернуть" его в отложенную форму лямбда или действия, 
это перенесет выполнение кода в Assert. Исключение бросков вместо провала теста
- для управления параметрами исключения (сообщения, источники и т.д.), 
оно (исключение) возвращается из метода Assert. Бросает исключение. 
Дополнительные проверки проводятся отдельно Assert-ами